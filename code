# Download the Oxford Flowers 102 dataset
!wget -q https://www.robots.ox.ac.uk/~vgg/data/flowers/102/102flowers.tgz
!tar -xzf 102flowers.tgz
!mkdir /content/flower_dataset
!mv jpg /content/flower_dataset/images

data_dir = '/content/flower_dataset'


import os
import shutil  

# Define the path to the images
images_path = '/content/flower_dataset/images'

# Check if the images directory exists
if not os.path.exists(images_path):
    print(f"Directory {images_path} does not exist. Please ensure the images are extracted properly.")
else:
    # Create directories for each class (assuming 102 classes)
    for i in range(1, 103):
        os.makedirs(f'/content/flower_dataset/class_{i}', exist_ok=True)

    # Move the images into their respective class folders
    for i, file in enumerate(os.listdir(images_path)):
        class_idx = (i // 80) + 1  # Assuming 80 images per class
        src = os.path.join(images_path, file)  # Source path of the file
        dest = os.path.join(f'/content/flower_dataset/class_{class_idx}', file)  # Destination path

        # Check if the file exists before moving
        if os.path.isfile(src):
            shutil.move(src, dest)
        else:
            print(f"File {src} not found. Skipping.")

    print("Images have been organized into class folders.")

# Check the structure of the flower_dataset directory
!ls /content/flower_dataset/class_1

import numpy as np
import os
import matplotlib.pyplot as plt
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import VGG16
from tensorflow.keras.applications.vgg16 import preprocess_input, decode_predictions

# Step 1: Load the VGG16 model
base_model = VGG16(weights='imagenet', include_top=True)

# Step 2: Prepare the image data
# Update the directory for the flower dataset
data_dir = '/content/flower_dataset'  # Path to the dataset

# Create a data generator for loading images
datagen = ImageDataGenerator(preprocessing_function=preprocess_input)

# Load images from directory
test_generator = datagen.flow_from_directory(
    data_dir,
    target_size=(224, 224),  # VGG16 requires 224x224 images
    batch_size=32,
    class_mode=None,  # No labels, just get the images
    shuffle=False  # We want to keep the order for predictions
)

# Step 3: Make predictions
predictions = base_model.predict(test_generator)

# Step 4: Decode the predictions to get human-readable class labels
decoded_predictions = decode_predictions(predictions, top=5)  # Get top 5 predictions for each image

# Step 5: Display the results
def display_predictions(test_generator, decoded_predictions):
    plt.figure(figsize=(15, 10))
    for i in range(len(test_generator)):
        plt.subplot(3, 4, i + 1)
        img = test_generator[i][0][0]  # Get the corresponding image
        plt.imshow(img / 255.0)  # Normalize for display
        plt.axis('off')
        # Display top prediction
        plt.title(f'Predicted: {decoded_predictions[i][0][1]} ({decoded_predictions[i][0][2]*100:.2f}%)')
    plt.tight_layout()
    plt.show()

# Display the images and predictions
display_predictions(test_generator, decoded_predictions)
